#!/bin/bash
#
# Ensure that the commit is viable and prepare for checkins and database
# updates:
#   * Check that versions repository is ready for update, and prepare its
#     matching commit.
#   * Lock necessary files and check if their versions match the ones in the
#     parents.

data_repo=../data
versions_repo=../versions
cvs_repo=../cvs_repo
utils=../utils
cvs_cmd=../cvs_cmd

delete=`git diff --cached --diff-filter=D --name-only`
add=`git diff --cached --diff-filter=A --name-only`
modify=`git diff --cached --diff-filter=M --name-only`
data_head_commit=`git rev-parse --quiet --verify HEAD`
data_has_head=$? # 0 means yes.
head=`cat .git/HEAD`

if [ "${head:0:16}" != 'ref: refs/heads/' ]; then
  echo 'Detached HEAD. Aborting.'
  exit 1
fi

branch=${head:16}

cd $versions_repo

if ! $utils/git_checkout $branch $data_repo $data_has_head $data_head_commit; then
  exit 1
fi

if [ -z "$delete$add$modify" ]; then
  # Empty commit. Nothing to do here.
  exit 0
fi

# TODO: Take other parents into account.
#       For now, we require that the files in the main parent are synchronized
#       or not modified.

# Begin: Locks and checks
version_array=( `$cvs_cmd/lock $delete $add $modify` )
if ! [ $? -eq 0 ]; then
  $cvs_cmd/unlock $delete $add $modify
  exit 1
fi

delete_array=( $delete )
add_array=( $add )
modify_array=( $modify )

if ! [ ${#version_array[@]} -eq $(( ${#delete_array[@]} + ${#add_array[@]} + ${#modify_array[@]} )) ]; then
  echo "Oops. Array sizes mismatch: ${#version_array[@]} != ${#delete_array[@]} + ${#add_array[@]} + ${#modify_array[@]}"
  $cvs_cmd/unlock $delete $add $modify
  exit 1
fi

i=0
d=${#delete_array[@]}
a=$((d + ${#add_array[@]}))
m=$((a + ${#modify_array[@]}))
mismatch=0
for (( ; i < d; ++i)); do # Removes
  expected="A`git show HEAD:${delete_array[i]}`"
  if ! [ ${version_array[i]} == $expected ]; then
    echo "Version mismatch: $expected < ${version_array[i]} ${delete_array[i]}"
    mismatch=1
  fi
done
for (( ; i < a; ++i)); do # Adds
  # TODO: Consider file ressurrection.
  expected="A1.0"
  if ! [ ${version_array[i]} == $expected ]; then
    echo "Version mismatch: $expected < ${version_array[i]} ${add_array[$((i-d))]}"
    mismatch=1
  fi
done
for (( ; i < m; ++i)); do # Modifies
  expected="A`git show HEAD:${modify_array[$((i-a))]}`"
  if ! [ ${version_array[i]} == $expected ]; then
    echo "Version mismatch: $expected < ${version_array[i]} ${modify_array[$((i-a))]}"
    mismatch=1
  fi
done

if [ $mismatch -ne 0 ]; then
  $cvs_cmd/unlock $delete $add $modify
  exit 1;
fi
# End: Locks and checks


# Apply removes.
if [ -n "$delete" ]; then
  git rm $delete
fi

# Apply additions.
for file in $add; do
  mkdir -p $(dirname $file)
  # TODO: Consider file ressurrection.
  echo 1.1 > $file
done

# Apply modifications.
for file in $modify; do
  mkdir -p $(dirname $file)
  $utils/version_advance `git show :0:$file` 1 > $file
done

if [ -n "$add$modify" ]; then
  git add $add $modify
fi

# CVS and database updates in post-commit hook.
touch ../modification_commit

