#!/bin/sh
#
# Setup parents and fill index in data repository to reflect this version
# repository.

data_repo=../data
versions_repo=../versions
map=../map

delete=`git diff --cached --diff-filter=D --name-only`
add=`git diff --cached --diff-filter=AM --name-only`
versions_head_commit=`git rev-parse --quiet --verify HEAD`
versions_has_head=$? # 0 means yes.
head=`cat .git/HEAD`

if [ "${head:0:16}" != 'ref: refs/heads/' ]; then
  echo 'Detached HEAD. Aborting.'
  exit 1
fi

branch=${head:16}

cd $data_repo

if git rev-parse --quiet --verify HEAD; then
  against=HEAD
else
  # Initial commit: diff against an empty tree object.
  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Assert that index and local tree are clean.
if ! git diff-index --quiet --cached $against; then
  echo 'Index not clean. Aborting.'
  exit 1;
elif ! git diff-files --quiet; then
  echo 'Working area not clean. Aborting.'
  exit 1;
fi

if [ $versions_has_head -eq 0 ]; then
  data_head_commit=`cat $map/${versions_head_commit:0:2}/${versions_head_commit:2}`
  if ! [ $? -eq 0 ]; then
    echo "Could not find data commit corresponding to versions commit $versions_head_commit."
    exit 1
  fi
fi

# Checkout and setup merge heads.
if git rev-parse --quiet --verify $branch; then
  git checkout $branch
else
  if [ $versions_has_head -eq 0 ]; then
    git checkout -b $branch $data_head_commit
  else
    git checkout --orphan $branch
    git rm -rf .
  fi
fi

# Assert that the branch is synchronized.
head_commit=`git rev-parse --quiet --verify HEAD`
has_head=$? # 0 means yes.
if [ $versions_has_head -eq 0 ]; then
  if ! [ $has_head -eq 0 ]; then
    echo "Branch $branch not synchronized."
    echo "In data, expected $data_head_commit, but found no commit."
    exit 1
  fi
  if ! [ $head_commit == $data_head_commit ]; then
    echo "Branch $branch not synchronized."
    echo "In data, expected $data_head_commit, but found $head_commit."
    exit 1
  fi
else
  if [ $has_head -eq 0 ]; then
    echo "Branch $branch not synchronized."
    echo "In data, expected no commit, but found HEAD=$head_commit."
    exit 1
  fi
fi

if git rev-parse --quiet --verify HEAD; then
  against=HEAD
else
  # Initial commit: diff against an empty tree object.
  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Assert that index and local tree are still clean after checkout.
if ! git diff-index --quiet --cached $against; then
  echo 'Index not clean. Aborting.'
  exit 1;
elif ! git diff-files --quiet; then
  echo 'Working area not clean. Aborting.'
  exit 1;
fi

# Translate MERGE_HEAD.
if [ -e $versions_repo/.git/MERGE_HEAD ]; then
  > .git/MERGE_HEAD
  while read -r p; do
    cat $map/${p:0:2}/${p:2} >> .git/MERGE_HEAD || \
    { echo "Could not found commit corresponding to $p." && exit 1; }
  done < $versions_repo/.git/MERGE_HEAD
else
  rm -f .git/MERGE_HEAD
fi

# Copy MERGE_MODE
if [ -e $versions_repo/.git/MERGE_MODE ]; then
  cp $versions_repo/.git/MERGE_MODE .git/
fi

if [ -n "$delete" ]; then
  git rm $delete
fi

for file in $add; do
  cd "$versions_repo"
  version=`git show :0:$file`
  cd "$data_repo"
  mkdir -p $(dirname $file)
  # TODO: Put version $version of file $file in data repository.
  # For now we emulate this by the following line.
  echo "$file;$version" > $file
done
if [ -n "$add" ]; then
  git add $add
fi

# Commit in post-commit hook.

